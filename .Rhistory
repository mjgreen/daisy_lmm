d
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
2304*48*4
nrow(d)
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
d=din %>%
rename(participant=PS) %>%
rename(block=Block) %>%
separate_wider_delim(Condition, names=c("priority", "suffix"), delim="/") %>%
mutate(suffix=tolower(suffix)) %>%
mutate(priority=tolower(priority)) %>%
mutate(suffix=str_replace(suffix, " ", "_")) %>%
mutate(priority=str_replace(priority, " ", "_")) %>%
group_by(participant) %>%
mutate(trial=seq_along(participant)) %>%
ungroup() %>%
mutate(trial=as_factor(trial)) %>%
relocate(participant, block, trial) %>%
pivot_longer(cols=c(Accuary_SP1, Accuary_SP2, Accuary_SP3, Accuary_SP4, Accuary_SP5, Accuary_SP6), values_to="accuracy", names_to="serial_position") %>%
mutate(serial_position = readr::parse_number(serial_position)) %>%
mutate(participant=as_factor(participant)) %>%
#mutate(block=as_factor(block)) %>%
#mutate(serial_position=as_factor(serial_position))
mutate(priority = factor(priority, levels=c("no_priority", "p5"), labels=c("NoPriority", "PrioritiseP5"))) %>%
mutate(suffix = factor(suffix, levels=c("no_suffix", "suffix"), labels=c("Absent", "Present")))
view(d)
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
m1=lmerTest::lmer(data=d,
accuracy ~ block + serial_position + suffix + priority +
(1+serial_position + suffix + priority | participant) +
(1 | trial)
)
print(summary(m1))
m1=lmerTest::lmer(data=d,
accuracy ~ block + serial_position + suffix + priority +
(1 + suffix + priority | participant) +
(1 | trial)
)
print(summary(m1))
48*48
48*48*6
ggplot(data=d, aes(y=accuracy, x=serial_position))+
stat_summary()
ggplot(data=d, aes(y=accuracy, x=serial_position, group=priority))+
stat_summary()
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary()
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary()+
theme_bw()
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary()+
theme_bw()+theme(panel.grid=element_blank())
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary()+
stat_summary(geom='line')+
theme_bw()+theme(panel.grid=element_blank())
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary(fun=mean_se)+
stat_summary(geom='line')+
theme_bw()+theme(panel.grid=element_blank())
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary(fun="mean_se")+
stat_summary(geom='line')+
theme_bw()+theme(panel.grid=element_blank())
stat_summary()
?stat_summary()
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary(fun.data="mean_se")+
stat_summary(geom='line')+
theme_bw()+theme(panel.grid=element_blank())
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line')+
theme_bw()+theme(panel.grid=element_blank())
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line')+
theme_bw()+theme(panel.grid=element_blank())+
labs(title = "Accuracy improves at position 5 (but not at other positions) when it is prioritised versus when it is not prioritised")
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line')+
theme_bw()+theme(panel.grid=element_blank())+
labs(caption = "Accuracy improves at position 5 (but not at other positions) when it is prioritised versus when it is not prioritised")
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
g1=ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line')+
theme_bw()+theme(panel.grid=element_blank())+
labs(caption = "Accuracy improves at position 5 (but not at other positions) when it is prioritised versus when it is not prioritised")
print(g1)
d=din %>%
rename(participant=PS) %>%
rename(block=Block) %>%
separate_wider_delim(Condition, names=c("priority", "suffix"), delim="/") %>%
mutate(suffix=tolower(suffix)) %>%
mutate(priority=tolower(priority)) %>%
mutate(suffix=str_replace(suffix, " ", "_")) %>%
mutate(priority=str_replace(priority, " ", "_")) %>%
group_by(participant) %>%
mutate(trial=seq_along(participant)) %>%
ungroup() %>%
mutate(trial=as_factor(trial)) %>%
relocate(participant, block, trial) %>%
pivot_longer(cols=c(Accuary_SP1, Accuary_SP2, Accuary_SP3, Accuary_SP4, Accuary_SP5, Accuary_SP6), values_to="accuracy", names_to="serial_position") %>%
mutate(serial_position = readr::parse_number(serial_position)) %>%
mutate(participant=as_factor(participant)) %>%
#mutate(block=as_factor(block)) %>%
#mutate(serial_position=as_factor(serial_position))
mutate(priority = factor(priority, levels=c("no_priority", "p5"), labels=c("PriorityNone", "PriorityPos5"))) %>%
mutate(suffix = factor(suffix, levels=c("no_suffix", "suffix"), labels=c("SuffAbsent", "SuffPresent")))
view(d)
g1=ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line')+
theme_bw()+theme(panel.grid=element_blank())+
labs(caption = "Accuracy improves at position 5 (but not at other positions) when it is prioritised versus when it is not prioritised")
print(g1)
source("~/gits/daisy/script1.R")
source("~/gits/daisy/script1.R")
print(summary(m1))
# try to capture the interaction of serial_position and priority
m1=lmerTest::lmer(data=d,
accuracy ~ block + suffix + serial_position + priority + serial_position:priority
(1 + serial_position + priority + serial_position:priority | participant) +
(1 | trial)
)
# try to capture the interaction of serial_position and priority
m1=lmerTest::lmer(data=d,
accuracy ~ block + suffix + serial_position + priority + serial_position:priority +
(1 + serial_position + priority + serial_position:priority | participant) +
(1 | trial)
)
# try to emphasise the interaction of serial_position and priority
m1=lmerTest::lmer(data=d,
accuracy ~ block + suffix +
serial_position + priority + serial_position:priority +
(1 | participant) +
(1 | trial)
)
print(summary(m1))
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line')+
theme_bw()+
theme(panel.grid=element_blank())+
scale_x_continuous(breaks=1:6)+
labs(title = "Accuracy improves at position 5 (but not at other positions)\n when it is prioritised versus when it is not prioritised")
m1$coef
m1@coef
str(m1)
coef(m1)
fixed(m1)
coef(summary(m1))
coef(summary(m1)) %>% kable()
library(knitr)
coef(summary(m1)) %>% kable()
coef(summary(m1))
result = coef(summary(m1)) %>% as_tibble()
rersult
result
result = coef(summary(m1)) %>% as_tibble() %>%
rename(p=`Pr(>|t|)`)
result
mutate(sig=ifelse(p<.001, "***"))
result = coef(summary(m1)) %>% as_tibble() %>%
rename(p=`Pr(>|t|)`) %>%
mutate(sig=ifelse(p<.001, "***"))
result = coef(summary(m1)) %>% as_tibble() %>%
rename(p=`Pr(>|t|)`) %>%
mutate(sig=ifelse(p<.001, "***", ""))
result
result = coef(summary(m1)) %>% as_tibble() %>%
rename(p=`Pr(>|t|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
result
coef(summary(m1))
coef(summary(m1)) %>% as_tibble(row.names=T)
?as_tibble
coef(summary(m1)) %>% as_tibble(rownames="effect")
result = coef(summary(m1)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|t|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
kable(result)
kable(result)
kable(result, digits = 3)
m2 = lmerTest::lmer(data=d,
accuracy ~ block + suffix +
serial_position + priority +
(1 | participant) +
(1 | trial)
)
m2
summary(m2)
summary(m2)
# build the actual model
m3 = lmerTest::lmer(data=d,
accuracy ~ block +
suffix * serial_position * priority +
(1 | participant) +
(1 | trial)
)
# just some visual formatting
result_m3 = coef(summary(m2)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|t|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m3, digits=3)
m3
summary(m3)
# just some visual formatting
result_m3 = coef(summary(m3)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|t|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m3, digits=3)
# build the actual model
m3 = lmerTest::lmer(data=d,
accuracy ~ block +
suffix + serial_position + priority +
serial_position:priority+
suffix:serial_position:priority
(1 | participant) +
(1 | trial)
)
# build the actual model
m3 = lmerTest::lmer(data=d,
accuracy ~ block +
suffix + serial_position + priority +
serial_position:priority+
suffix:serial_position:priority+
(1 | participant) +
(1 | trial)
)
# just some visual formatting
result_m3 = coef(summary(m3)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|t|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m3, digits=3)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot(allEffects(m1))
plot(allEffects(m1))
summary(m1)
plot(allEffects(m1))
source("~/.active-rstudio-document", echo=TRUE)
m5=glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
#serial_position : priority+
suffix : serial_position : priority+
(1 | participant) +
(1 | trial)
)
summary(m5)
contrasts(d$serial_position)
contrasts(d$serial_position)<- contr.sum()
contrasts(d$serial_position)<- contr.sum(6)
contrasts(d$serial_position)
m5=glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
#serial_position : priority+
suffix : serial_position : priority+
(1 | participant) +
(1 | trial)
)
summary(m5)
summary(d)
str(d)
d$serial_position <- as.numeric(d$serial_position)
fit1 = glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
suffix : serial_position : priority+
(1 | participant) +
)
fit1 = glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
suffix : serial_position : priority+
(1 | participant)
)
fit1 = glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
suffix : serial_position : priority+
(1 | participant) +
(1|trial)
)
# just some visual formatting
result_fit1 = coef(summary(fit1)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|z|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_fit1, digits=3)
table(d$serial_position, d$priority)
table(d$serial_position, d$priority, d$suffix)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(lme4)
library(knitr)
library(effects)
din=read_excel("tactile_prioritisation_suffix_longform.xlsx")
d=din %>%
rename(participant=PS) %>%
rename(block=Block) %>%
separate_wider_delim(Condition, names=c("priority", "suffix"), delim="/") %>%
mutate(suffix=tolower(suffix)) %>%
mutate(priority=tolower(priority)) %>%
mutate(suffix=str_replace(suffix, " ", "_")) %>%
mutate(priority=str_replace(priority, " ", "_")) %>%
group_by(participant) %>%
mutate(trial=seq_along(participant)) %>%
ungroup() %>%
mutate(trial=as_factor(trial)) %>%
relocate(participant, block, trial) %>%
pivot_longer(cols=c(Accuary_SP1, Accuary_SP2, Accuary_SP3, Accuary_SP4, Accuary_SP5, Accuary_SP6), values_to="accuracy", names_to="serial_position") %>%
mutate(serial_position = readr::parse_number(serial_position)) %>%
mutate(participant=as_factor(participant)) %>%
#mutate(block=as_factor(block)) %>%
mutate(serial_position=as_factor(serial_position)) %>%
mutate(priority = factor(priority, levels=c("no_priority", "p5"), labels=c("PrioritiseNone", "PrioritisePos5"))) %>%
mutate(suffix = factor(suffix, levels=c("no_suffix", "suffix"), labels=c("SuffAbsent", "SuffPresent")))
table(d$serial_position, d$priority, d$suffix)
kable(head(d))
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line', aes(group=priority))+
theme_bw()+
theme(panel.grid=element_blank())+
#scale_x_continuous(breaks=1:6)+
labs(title = "Accuracy improves at position 5 (but not at other positions)\n when it is prioritised versus when it is not prioritised")
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line', aes(group=priority))+
theme_bw()+
#theme(panel.grid=element_blank())+
#scale_x_continuous(breaks=1:6)+
labs(title = "Accuracy improves at position 5 (but not at other positions)\n when it is prioritised versus when it is not prioritised")
with(d, plot(trial~block))
e=d %>% subset(trial==1)
view(e)
d
# build the actual model
m1 = glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
(1 | participant) +
(1 | trial)
)
# just some visual formatting
result_m1 = coef(summary(m1)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|z|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m1, digits=3)
str(d)
plot(effects(mod1))
plot(effects(m1))
# build the actual model
m1 = glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
(1 | participant) +
(1 | trial)
)
# just some visual formatting
result_m1 = coef(summary(m1)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|z|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m1, digits=3)
plot(allEffects(m1))
lattice::qqmath(ranef(m1, condVar = TRUE), strip = FALSE)$participant
lattice::qqmath(ranef(m1, condVar = TRUE), strip = FALSE)$trial
# build the actual model
m2 = glmer(data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
serial_position : priority +
(1 | participant) +
(1 | trial)
)
# just some visual formatting
result_m2 = coef(summary(m2)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|z|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m2, digits=3)
# build the actual model
m3 = glmer(
data=d,
family=binomial,
formula=
accuracy ~ block + suffix + serial_position + priority +
serial_position : priority+
suffix : serial_position : priority +
(1 | participant) +
(1 | trial)
)
# just some visual formatting
result_m3 = coef(summary(m3)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|z|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m3, digits=3)
lattice::qqmath(ranef(m4, condVar = TRUE), strip = FALSE)$participant
d_subset=d %>% filter(serial_position==5)
m4=glmer(data=d_subset,
family=binomial,
formula=
accuracy ~ block + suffix * priority +
(1 + suffix + priority | participant) +
(1 + suffix + priority | trial)
)
# just some visual formatting
result_m4 = coef(summary(m4)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|z|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# qqplot of the random effects with their variances
lattice::qqmath(ranef(m4, condVar = TRUE), strip = FALSE)$participant
# qqplot of the random effects with their variances
lattice::qqmath(ranef(m4, condVar = TRUE), strip = FALSE)$trial
plot(allEffects(m4))
d_subset=d %>% filter(serial_position==5)
m4=glmer(data=d_subset,
family=binomial,
formula=
accuracy ~ block + suffix + priority +
suffix:priority+
(1 + suffix + priority | participant) +
(1 + suffix + priority | trial)
)
# just some visual formatting
result_m4 = coef(summary(m4)) %>% as_tibble(rownames="effect") %>%
rename(p=`Pr(>|z|)`) %>%
mutate(sig=ifelse(p<.001, "***", ifelse(p<.01, "**", ifelse(p<0.05, "*", ""))))
# show a table
kable(result_m4, digits=3)
plot(allEffects(m4))
# qqplot of the random effects with their variances
lattice::qqmath(ranef(m4, condVar = TRUE), strip = FALSE)$participant
lattice::qqmath(ranef(m4, condVar = TRUE), strip = FALSE)$trial
plot(allEffects(m4))
dd=d %>% mutate(serial_position=as.numeric(serial_position))
str(dd)
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line', aes(group=priority))+
theme_bw()+
#theme(panel.grid=element_blank())+
#scale_x_continuous(breaks=1:6)+
labs(title = "Accuracy improves at position 5 (but not at other positions)\n when it is prioritised versus when it is not prioritised")
ggplot(data=dd, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
geom_smooth()
?geom_smooth
ggplot(data=dd, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
geom_smooth(n=5)
ggplot(data=dd, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
geom_smooth(formula = y ~ s(x, bs = "cs", k=5))+
#stat_summary(fun.data="mean_se")+
#stat_summary(fun.data="mean_se", geom='line', aes(group=priority))+
theme_bw()+
#theme(panel.grid=element_blank())+
#scale_x_continuous(breaks=1:6)+
labs(title = "Accuracy improves at position 5 (but not at other positions)\n when it is prioritised versus when it is not prioritised")
ggplot(data=d, aes(y=accuracy, x=serial_position, colour=priority))+
facet_wrap(~suffix)+
stat_summary(fun.data="mean_se")+
stat_summary(fun.data="mean_se", geom='line', aes(group=priority))+
theme_bw()+
#theme(panel.grid=element_blank())+
#scale_x_continuous(breaks=1:6)+
labs(title = "Accuracy improves at position 5 (but not at other positions)\n when it is prioritised versus when it is not prioritised")
